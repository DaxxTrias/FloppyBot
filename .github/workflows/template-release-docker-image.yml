on:
  workflow_call:
    inputs:
      dockerfile_path:
        required: true
        type: string
      project_path:
        required: true
        type: string
      dockerfile_context:
        required: false
        type: string
        default: "."
      image_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      push_release:
        required: false
        type: boolean
        default: false
      push_latest:
        required: false
        type: boolean
        default: false
    secrets:
      docker_hub_username:
        required: true
      docker_hub_token:
        required: true

jobs:
  build-docker-image:
    name: Build ${{ inputs.image_name }}
    runs-on: ubuntu-latest
    steps:
      # Setup Environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_token }}
      # Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Calculate short Version
        run: |
          wget -O ./semver.sh https://raw.githubusercontent.com/cloudflare/semver_bash/master/semver.sh
          echo "${{ inputs.image_tag }}" > ./app-version
          bash ./scripts/determine-version.sh
      # Build Binaries
      - name: Restore dependencies
        run: |
          dotnet tool restore
          dotnet restore ${{ inputs.project_path }}
      - name: Build binaries
        run: |
          dotnet build \
            --no-restore \
            --configuration Release \
            /p:Version=$(cat ./app-short-version | xargs) \
            /p:InformationalVersion=${{ inputs.image_tag }} \
            ${{ inputs.project_path }}
      - name: Release binaries
        run: |
          dotnet release \
            --no-restore \
            --no-build \
            --configuration Release \
            -o ./out \
            ${{ inputs.image_tag }}
      # Build Image
      - name: Build and push (${{ inputs.image_tag }})
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.dockerfile_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          platforms: linux/amd64
          tags: ${{ inputs.image_name }}:${{ inputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push (latest)
        if: ${{ inputs.push_latest }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.dockerfile_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          platforms: linux/amd64
          tags: ${{ inputs.image_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push (release)
        if: ${{ inputs.push_release }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.dockerfile_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          platforms: linux/amd64
          tags: ${{ inputs.image_name }}:release
          cache-from: type=gha
          cache-to: type=gha,mode=max
